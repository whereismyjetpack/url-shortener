## Workflow used to promote an environment from integration (main) to staging, using the artifact from the main branch 
## This workflow will attempt to find the next version of the software, create a github release, and then promote the 
## integration overlay to the staging environment
---
name: Promote to Staging

on: [workflow_dispatch]

env:
  REGISTRY: ghcr.io
  GH_TOKEN: ${{ github.token }}
  IMAGE_NAME: ${{ github.repository }}
  PULL_REQUEST_URL: "null"
  K8S_DEPLOYMENT_REPO: whereismyjetpack/gitops

jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{steps.version.outputs.netxt-version}}
    steps:
      # We depend on the main workflow to run, build a docker image, and deploy to integration. 
      # If that step doesn't complete, or hasn't completed -- we will fail fast here
      - name: Wait for workflow
        uses: ArcticLampyrid/action-wait-for-workflow@v1.2.0
        with:
          workflow: main.yml
  
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      # Determine the next version of the software. The action we are using here determines 
      # the next version based off PR labels. 
      # Major - major,breaking
      # Minor - minor
      - id: version
        uses: fabien-marty/github-next-semantic-version-action@v1
        with:
          github-token: ${{ github.token }} 
          repository: ${{ github.repository }}
          repository-owner: ${{ github.repository_owner }}
        
      # We check HEAD against the last released version of the software
      # If they are the same, we don't need to cut another release.
      - name: Check release
        id: check
        run: |
          echo "Latest version is ${{ steps.version.outputs.latest-version }}"
          echo "Next version is ${{ steps.version.outputs.next-version }}"
          if [ $(git rev-list -n 1 ${{ steps.version.outputs.latest-version}}) = $(git rev-list -n 1 HEAD) ]; then 

            echo "changed=false" >> "$GITHUB_OUTPUT"
          else
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      # Create Release If we need to
      - name: Create Release
        if: ${{steps.check.outputs.changed == 'true' }}
        run: |
          gh release create ${{ steps.version.outputs.next-version }} --generate-notes

  # create-jira-release:
  #   runs-on: ubuntu-latest
  #   needs: [release]
  #   steps:
  #     - name: create release
  #       uses: Rorychan/jira-releases-action@v1
  #       with:
  #         jira-server: 'https://dannbohn.atlassian.net'
  #         jira-email: 'dannbohn@gmail.com'
  #         jira-api-token: ${{ secrets.JIRA_TOKEN }}
  #         project-name: 'KAN'
  #         release-name: 'things'
          # release-name: ${{ needs.release.outputs.version }}

  promote:
    concurrency:
      group: staging_environment
      cancel-in-progress: true
    runs-on: ubuntu-latest
    environment: staging
    needs: [release]
    steps:
      - name: start deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: staging

      - name: Checkout Deployment Repo
        uses: actions/checkout@v4
        with:
          repository: ${{ env.K8S_DEPLOYMENT_REPO }}
          token: ${{ secrets.GIT_HUB_ACCESS_TOKEN }}
          path: deployment

      - name: Promote
        uses: kustomize-everything/action-promote@v4.3.3
        id: promote
        with:
          images: |-
            [
              {
                "name": "fastify-url-shortner",
                "fromOverlay": "env/fastify-url-shortner/integration",
                "overlays": ["env/fastify-url-shortner/staging"]
              }
            ]
          target-repo: ${{ env.K8S_DEPLOYMENT_REPO }}
          promotion-method: push
          working-directory: deployment
          github-token: ${{ secrets.GIT_HUB_ACCESS_TOKEN }}
          git-commit-user: 'whereismyjetpack'
          git-commit-email: 'mail@mail.mail'

      - name: debug
        run: |
          echo "${{ steps.promote.outputs.images-updated }}"

      - name: update deployment status
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.deployment.outputs.env }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}



